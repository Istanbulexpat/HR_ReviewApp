import 'package:flutter/material.dart';
import 'package:firebase_core/firebase_core.dart';
import 'package:firebase_auth/firebase_auth.dart';
import 'package:cloud_firestore/cloud_firestore.dart';

// --- Global Firebase Variables (Placeholders for Canvas Environment) ---
// In a real Flutter app, these would be configured via environment variables
// or a firebase_options.dart file generated by FlutterFire CLI.
// For this Canvas environment, we'll assume Firebase is initialized externally
// and provide a placeholder for the app ID.
const String _appId = 'default-ghost-app-id'; // Replace with actual __app_id in a real setup
FirebaseAuth? _auth;
FirebaseFirestore? _db;
String? _currentUserId;

void main() async {
  WidgetsFlutterBinding.ensureInitialized();
  try {
    // Attempt to initialize Firebase. In a real Flutter app,
    // you'd typically use `Firebase.initializeApp(options: DefaultFirebaseOptions.currentPlatform)`.
    // For this Canvas environment, we'll try to initialize if not already.
    if (Firebase.apps.isEmpty) {
      // This is a simplified initialization. A real app would use platform-specific options.
      // For the purpose of demonstration in a web environment, this might be sufficient
      // if the underlying environment handles the actual Firebase config.
      await Firebase.initializeApp();
    }
    _auth = FirebaseAuth.instance;
    _db = FirebaseFirestore.instance;

    // Simulate initial authentication based on __initial_auth_token if it were available
    // In a real Flutter app, you'd pass this token from the native side or a web bridge.
    // For now, we'll just sign in anonymously if not already signed in.
    if (_auth?.currentUser == null) {
      if (const String.fromEnvironment('INITIAL_AUTH_TOKEN').isNotEmpty) {
        // This part is illustrative. Actual token passing from Canvas to Flutter is complex.
        // For demonstration, we'll just sign in anonymously.
        try {
          UserCredential userCredential = await _auth!.signInWithCustomToken(const String.fromEnvironment('INITIAL_AUTH_TOKEN'));
          _currentUserId = userCredential.user?.uid;
          print("Signed in with custom token: $_currentUserId");
        } catch (e) {
          print("Error with custom token, signing in anonymously: $e");
          UserCredential userCredential = await _auth!.signInAnonymously();
          _currentUserId = userCredential.user?.uid;
          print("Signed in anonymously: $_currentUserId");
        }
      } else {
        UserCredential userCredential = await _auth!.signInAnonymously();
        _currentUserId = userCredential.user?.uid;
        print("Signed in anonymously: $_currentUserId");
      }
    } else {
      _currentUserId = _auth!.currentUser?.uid;
      print("Already signed in: $_currentUserId");
    }

    // Listen for auth state changes to update _currentUserId
    _auth?.authStateChanges().listen((User? user) {
      _currentUserId = user?.uid;
      print("Auth state changed, current user ID: $_currentUserId");
    });

  } catch (e) {
    print("Failed to initialize Firebase in Flutter: $e");
    // Handle cases where Firebase initialization fails (e.g., missing config)
  }

  runApp(const MyApp());
}

class MyApp extends StatelessWidget {
  const MyApp({super.key});

  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      title: 'Ghost App',
      theme: ThemeData(
        primarySwatch: Colors.red,
        fontFamily: 'Inter', // Assuming Inter font is available or imported
        scaffoldBackgroundColor: Colors.white,
        appBarTheme: const AppBarTheme(
          backgroundColor: Colors.white,
          foregroundColor: Colors.black,
          elevation: 0,
        ),
        textTheme: const TextTheme(
          displayLarge: TextStyle(color: Colors.black),
          displayMedium: TextStyle(color: Colors.black),
          displaySmall: TextStyle(color: Colors.black),
          headlineMedium: TextStyle(color: Colors.black),
          headlineSmall: TextStyle(color: Colors.black),
          titleLarge: TextStyle(color: Colors.black),
          bodyLarge: TextStyle(color: Colors.black),
          bodyMedium: TextStyle(color: Colors.black),
          labelLarge: TextStyle(color: Colors.black),
        ),
        colorScheme: ColorScheme.fromSwatch(primarySwatch: Colors.red).copyWith(secondary: Colors.red[700]),
      ),
      home: const GhostApp(),
    );
  }
}

// --- Star Rating Widget ---
class StarRating extends StatelessWidget {
  final int score; // 1 (best) to 5 (worst)

  const StarRating({super.key, required this.score});

  @override
  Widget build(BuildContext context) {
    return Row(
      mainAxisSize: MainAxisSize.min,
      children: List.generate(5, (index) {
        return Icon(
          Icons.star_rounded,
          color: index < score ? Colors.red[700] : Colors.grey[300],
          size: 20,
        );
      }),
    );
  }
}

// --- Review Modal Widget ---
class ReviewModal extends StatefulWidget {
  final Function(String targetType, String targetName, int score, String reviewText) onSubmit;

  const ReviewModal({super.key, required this.onSubmit});

  @override
  State<ReviewModal> createState() => _ReviewModalState();
}

class _ReviewModalState extends State<ReviewModal> {
  String _targetType = 'recruiter';
  final TextEditingController _targetNameController = TextEditingController();
  int _score = 1; // 1 (best) to 5 (worst)
  final TextEditingController _reviewTextController = TextEditingController();
  bool _isSubmitting = false;
  String _message = '';

  @override
  void dispose() {
    _targetNameController.dispose();
    _reviewTextController.dispose();
    super.dispose();
  }

  Future<void> _handleSubmit() async {
    if (_currentUserId == null) {
      setState(() {
        _message = "Please sign in to leave a review.";
      });
      return;
    }
    if (_targetNameController.text.isEmpty || _reviewTextController.text.isEmpty) {
      setState(() {
        _message = "Please fill in all fields.";
      });
      return;
    }

    setState(() {
      _isSubmitting = true;
      _message = '';
    });

    try {
      await widget.onSubmit(
        _targetType,
        _targetNameController.text,
        _score,
        _reviewTextController.text,
      );
      setState(() {
        _message = "Review submitted successfully!";
      });
      // Clear form after successful submission
      _targetType = 'recruiter';
      _targetNameController.clear();
      _score = 1;
      _reviewTextController.clear();
      Future.delayed(const Duration(milliseconds: 1500), () {
        Navigator.of(context).pop(); // Close modal
        setState(() {
          _message = '';
        });
      });
    } catch (e) {
      setState(() {
        _message = "Failed to submit review: ${e.toString()}";
      });
      print("Error submitting review: $e");
    } finally {
      setState(() {
        _isSubmitting = false;
      });
    }
  }

  @override
  Widget build(BuildContext context) {
    return Dialog(
      shape: RoundedRectangleBorder(borderRadius: BorderRadius.circular(20)),
      elevation: 10,
      child: Padding(
        padding: const EdgeInsets.all(24.0),
        child: SingleChildScrollView(
          child: Column(
            mainAxisSize: MainAxisSize.min,
            children: [
              Align(
                alignment: Alignment.topRight,
                child: IconButton(
                  icon: const Icon(Icons.close, color: Colors.black54),
                  onPressed: () => Navigator.of(context).pop(),
                ),
              ),
              const Text(
                'Leave a Review',
                style: TextStyle(
                  fontSize: 24,
                  fontWeight: FontWeight.bold,
                  color: Colors.black,
                ),
                textAlign: TextAlign.center,
              ),
              const SizedBox(height: 24),
              DropdownButtonFormField<String>(
                value: _targetType,
                decoration: const InputDecoration(
                  labelText: 'Review Type',
                  border: OutlineInputBorder(borderRadius: BorderRadius.all(Radius.circular(10))),
                  focusedBorder: OutlineInputBorder(
                    borderSide: BorderSide(color: Colors.red),
                    borderRadius: BorderRadius.all(Radius.circular(10)),
                  ),
                ),
                items: const [
                  DropdownMenuItem(value: 'recruiter', child: Text('Recruiter/Interviewer')),
                  DropdownMenuItem(value: 'company', child: Text('Company')),
                ],
                onChanged: (value) {
                  setState(() {
                    _targetType = value!;
                  });
                },
              ),
              const SizedBox(height: 16),
              TextField(
                controller: _targetNameController,
                decoration: InputDecoration(
                  labelText: 'Name of ${_targetType == 'recruiter' ? 'Recruiter/Interviewer' : 'Company'}',
                  hintText: 'e.g., John Doe or Acme Corp.',
                  border: const OutlineInputBorder(borderRadius: BorderRadius.all(Radius.circular(10))),
                  focusedBorder: const OutlineInputBorder(
                    borderSide: BorderSide(color: Colors.red),
                    borderRadius: BorderRadius.all(Radius.circular(10)),
                  ),
                ),
              ),
              const SizedBox(height: 16),
              Column(
                crossAxisAlignment: CrossAxisAlignment.start,
                children: [
                  const Text(
                    'Score (1-5, 5 being worst)',
                    style: TextStyle(fontSize: 14, color: Colors.black87),
                  ),
                  Slider(
                    value: _score.toDouble(),
                    min: 1,
                    max: 5,
                    divisions: 4,
                    label: _score.toString(),
                    onChanged: (value) {
                      setState(() {
                        _score = value.toInt();
                      });
                    },
                    activeColor: Colors.red[700],
                    inactiveColor: Colors.red[100],
                  ),
                  Align(
                    alignment: Alignment.center,
                    child: Text(
                      _score.toString(),
                      style: const TextStyle(fontSize: 18, fontWeight: FontWeight.bold, color: Colors.red),
                    ),
                  ),
                ],
              ),
              const SizedBox(height: 16),
              TextField(
                controller: _reviewTextController,
                maxLines: 4,
                decoration: const InputDecoration(
                  labelText: 'Your Review',
                  hintText: 'Describe your experience...',
                  border: OutlineInputBorder(borderRadius: BorderRadius.all(Radius.circular(10))),
                  focusedBorder: OutlineInputBorder(
                    borderSide: BorderSide(color: Colors.red),
                    borderRadius: BorderRadius.all(Radius.circular(10)),
                  ),
                ),
              ),
              const SizedBox(height: 24),
              if (_message.isNotEmpty)
                Padding(
                  padding: const EdgeInsets.only(bottom: 16.0),
                  child: Text(
                    _message,
                    style: TextStyle(
                      color: _message.contains('success') ? Colors.green : Colors.red,
                      fontSize: 14,
                    ),
                    textAlign: TextAlign.center,
                  ),
                ),
              ElevatedButton(
                onPressed: _isSubmitting ? null : _handleSubmit,
                style: ElevatedButton.styleFrom(
                  backgroundColor: Colors.red[700],
                  foregroundColor: Colors.white,
                  padding: const EdgeInsets.symmetric(horizontal: 40, vertical: 15),
                  shape: RoundedRectangleBorder(borderRadius: BorderRadius.circular(10)),
                  textStyle: const TextStyle(fontSize: 18, fontWeight: FontWeight.bold),
                  elevation: 5,
                ),
                child: _isSubmitting
                    ? const CircularProgressIndicator(color: Colors.white)
                    : const Text('Submit Review'),
              ),
            ],
          ),
        ),
      ),
    );
  }
}

// --- Main App Widget ---
class GhostApp extends StatefulWidget {
  const GhostApp({super.key});

  @override
  State<GhostApp> createState() => _GhostAppState();
}

class _GhostAppState extends State<GhostApp> {
  bool _isAuthenticated = false;
  String? _displayUserId;
  List<Map<String, dynamic>> _recentReviews = [];
  bool _loadingReviews = true;

  // Mock Leaderboard data
  final List<Map<String, dynamic>> _leaderboard = [
    {'name': 'Acme Corp.', 'type': 'company', 'score': 4.8, 'reviews': 120},
    {'name': 'Jane Smith', 'type': 'recruiter', 'score': 4.5, 'reviews': 85},
    {'name': 'Globex Inc.', 'type': 'company', 'score': 4.2, 'reviews': 90},
    {'name': 'Bob Johnson', 'type': 'recruiter', 'score': 4.0, 'reviews': 70},
  ];

  @override
  void initState() {
    super.initState();
    _setupAuthStateListener();
    _fetchRecentReviews();
  }

  void _setupAuthStateListener() {
    _auth?.authStateChanges().listen((User? user) {
      setState(() {
        _isAuthenticated = user != null;
        _displayUserId = user?.uid;
        _currentUserId = user?.uid; // Update global userId
      });
      print("Flutter Auth State: User is ${_isAuthenticated ? 'signed in' : 'signed out'}");
    });
  }

  void _fetchRecentReviews() {
    if (_db != null) {
      final reviewsCollectionRef = _db!.collection('artifacts/$_appId/public/data/reviews');
      reviewsCollectionRef.orderBy('timestamp', descending: true).limit(4).snapshots().listen((snapshot) {
        setState(() {
          _recentReviews = snapshot.docs.map((doc) => doc.data()).toList();
          _loadingReviews = false;
        });
      }, onError: (error) {
        print("Error fetching recent reviews: $error");
        setState(() {
          _loadingReviews = false;
        });
      });
    } else {
      setState(() {
        _loadingReviews = false;
      });
      print("Firestore not initialized. Cannot fetch reviews.");
    }
  }

  Future<void> _handleLeaveReview(String targetType, String targetName, int score, String reviewText) async {
    if (_db == null || _currentUserId == null) {
      throw Exception("Database not ready or user not authenticated.");
    }

    final reviewData = {
      'reviewerId': _currentUserId,
      'targetType': targetType,
      'targetName': targetName,
      'score': score,
      'reviewText': reviewText,
      'timestamp': FieldValue.serverTimestamp(),
    };

    final reviewsCollectionRef = _db!.collection('artifacts/$_appId/public/data/reviews');
    await reviewsCollectionRef.add(reviewData);
  }

  Future<void> _handleAuthAction() async {
    if (_auth == null) return;

    if (_isAuthenticated) {
      try {
        await _auth!.signOut();
        print("User signed out.");
      } catch (e) {
        print("Error signing out: $e");
      }
    } else {
      try {
        await _auth!.signInAnonymously();
        print("Signed in anonymously for auth action.");
      } catch (e) {
        print("Error signing in anonymously: $e");
      }
    }
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: Row(
          children: [
            const Text(
              'Ghost',
              style: TextStyle(
                fontSize: 32,
                fontWeight: FontWeight.w800,
                color: Color(0xFFB71C1C), // Blood Red
              ),
            ),
            const SizedBox(width: 8),
            Text(
              '👻',
              style: TextStyle(fontSize: 28),
            ),
          ],
        ),
        actions: [
          if (_displayUserId != null)
            Padding(
              padding: const EdgeInsets.symmetric(horizontal: 8.0),
              child: Center(
                child: Container(
                  padding: const EdgeInsets.symmetric(horizontal: 8, vertical: 4),
                  decoration: BoxDecoration(
                    color: Colors.grey[100],
                    borderRadius: BorderRadius.circular(8),
                  ),
                  child: Text(
                    'User ID: ${_displayUserId!.substring(0, 6)}...',
                    style: const TextStyle(fontSize: 12, color: Colors.black54),
                  ),
                ),
              ),
            ),
          Padding(
            padding: const EdgeInsets.only(right: 8.0),
            child: ElevatedButton.icon(
              onPressed: _handleAuthAction,
              style: ElevatedButton.styleFrom(
                backgroundColor: Colors.black,
                foregroundColor: Colors.white,
                shape: RoundedRectangleBorder(borderRadius: BorderRadius.circular(10)),
                elevation: 3,
              ),
              icon: Icon(_isAuthenticated ? Icons.logout : Icons.login),
              label: Text(_isAuthenticated ? 'Sign Out' : 'Sign In / Sign Up'),
            ),
          ),
        ],
      ),
      body: SingleChildScrollView(
        padding: const EdgeInsets.all(16.0),
        child: Center(
          child: ConstrainedBox(
            constraints: const BoxConstraints(maxWidth: 600),
            child: Column(
              crossAxisAlignment: CrossAxisAlignment.stretch,
              children: [
                // Leave a Review Button Section
                Card(
                  color: const Color(0xFFB71C1C), // Blood Red
                  elevation: 8,
                  shape: RoundedRectangleBorder(borderRadius: BorderRadius.circular(20)),
                  child: Padding(
                    padding: const EdgeInsets.all(24.0),
                    child: Column(
                      children: [
                        const Text(
                          'Share Your Experience',
                          style: TextStyle(
                            fontSize: 28,
                            fontWeight: FontWeight.bold,
                            color: Colors.white,
                          ),
                          textAlign: TextAlign.center,
                        ),
                        const SizedBox(height: 16),
                        const Text(
                          'Help others by reviewing companies and recruiters who ghosted, treated candidates poorly, or acted unethically.',
                          style: TextStyle(
                            fontSize: 16,
                            color: Colors.white70,
                          ),
                          textAlign: TextAlign.center,
                        ),
                        const SizedBox(height: 24),
                        ElevatedButton.icon(
                          onPressed: () {
                            showDialog(
                              context: context,
                              builder: (context) => ReviewModal(onSubmit: _handleLeaveReview),
                            );
                          },
                          style: ElevatedButton.styleFrom(
                            backgroundColor: Colors.white,
                            foregroundColor: const Color(0xFFB71C1C), // Blood Red
                            padding: const EdgeInsets.symmetric(horizontal: 30, vertical: 15),
                            shape: RoundedRectangleBorder(borderRadius: BorderRadius.circular(30)),
                            textStyle: const TextStyle(fontSize: 20, fontWeight: FontWeight.bold),
                            elevation: 5,
                            shadowColor: Colors.black54,
                          ),
                          icon: const Icon(Icons.add_comment_rounded, size: 28),
                          label: const Text('Leave a Review'),
                        ),
                      ],
                    ),
                  ),
                ),
                const SizedBox(height: 24),

                // Recent Community Reviews Section
                Card(
                  elevation: 4,
                  shape: RoundedRectangleBorder(borderRadius: BorderRadius.circular(15)),
                  child: Padding(
                    padding: const EdgeInsets.all(20.0),
                    child: Column(
                      crossAxisAlignment: CrossAxisAlignment.start,
                      children: [
                        Row(
                          children: [
                            Icon(Icons.comment_rounded, color: const Color(0xFFB71C1C), size: 24),
                            SizedBox(width: 10),
                            Text(
                              'Recent Community Reviews',
                              style: TextStyle(
                                fontSize: 22,
                                fontWeight: FontWeight.bold,
                                color: Colors.black87,
                              ),
                            ),
                          ],
                        ),
                        const Divider(height: 20, thickness: 1, color: Colors.grey),
                        _loadingReviews
                            ? const Center(child: CircularProgressIndicator(color: Color(0xFFB71C1C)))
                            : _recentReviews.isEmpty
                                ? const Center(
                                    child: Padding(
                                      padding: EdgeInsets.all(16.0),
                                      child: Text(
                                        'No reviews yet. Be the first to leave one!',
                                        style: TextStyle(color: Colors.black54),
                                      ),
                                    ),
                                  )
                                : ListView.builder(
                                    shrinkWrap: true,
                                    physics: const NeverScrollableScrollPhysics(),
                                    itemCount: _recentReviews.length,
                                    itemBuilder: (context, index) {
                                      final review = _recentReviews[index];
                                      final timestamp = review['timestamp'] as Timestamp?;
                                      final date = timestamp?.toDate();
                                      return Padding(
                                        padding: const EdgeInsets.symmetric(vertical: 8.0),
                                        child: Container(
                                          padding: const EdgeInsets.all(12),
                                          decoration: BoxDecoration(
                                            color: Colors.grey[50],
                                            borderRadius: BorderRadius.circular(10),
                                            border: Border.all(color: Colors.grey[200]!),
                                          ),
                                          child: Column(
                                            crossAxisAlignment: CrossAxisAlignment.start,
                                            children: [
                                              Row(
                                                children: [
                                                  Icon(
                                                    review['targetType'] == 'company'
                                                        ? Icons.business
                                                        : Icons.person,
                                                    color: review['targetType'] == 'company'
                                                        ? Colors.blue[700]
                                                        : Colors.green[700],
                                                    size: 20,
                                                  ),
                                                  const SizedBox(width: 8),
                                                  Expanded(
                                                    child: Text(
                                                      review['targetName'] ?? 'N/A',
                                                      style: const TextStyle(
                                                        fontWeight: FontWeight.w600,
                                                        fontSize: 16,
                                                        color: Colors.black,
                                                      ),
                                                    ),
                                                  ),
                                                ],
                                              ),
                                              const SizedBox(height: 4),
                                              StarRating(score: review['score'] ?? 1),
                                              const SizedBox(height: 8),
                                              Text(
                                                review['reviewText'] ?? 'No review text.',
                                                style: const TextStyle(fontSize: 14, color: Colors.black87),
                                                maxLines: 3,
                                                overflow: TextOverflow.ellipsis,
                                              ),
                                              const SizedBox(height: 8),
                                              Text(
                                                'Reviewed by: ${review['reviewerId'] != null ? 'User ${review['reviewerId'].substring(0, 6)}...' : 'Anonymous'} on ${date != null ? '${date.month}/${date.day}/${date.year}' : 'N/A'}',
                                                style: const TextStyle(fontSize: 12, color: Colors.black54),
                                              ),
                                            ],
                                          ),
                                        ),
                                      );
                                    },
                                  ),
                      ],
                    ),
                  ),
                ),
                const SizedBox(height: 24),

                // Top Ghosted/Unethical Leaderboard Section
                Card(
                  elevation: 4,
                  shape: RoundedRectangleBorder(borderRadius: BorderRadius.circular(15)),
                  child: Padding(
                    padding: const EdgeInsets.all(20.0),
                    child: Column(
                      crossAxisAlignment: CrossAxisAlignment.start,
                      children: [
                        Row(
                          children: [
                            Icon(Icons.leaderboard_rounded, color: const Color(0xFFB71C1C), size: 24),
                            SizedBox(width: 10),
                            Text(
                              'Top Ghosted / Unethical',
                              style: TextStyle(
                                fontSize: 22,
                                fontWeight: FontWeight.bold,
                                color: Colors.black87,
                              ),
                            ),
                          ],
                        ),
                        const Divider(height: 20, thickness: 1, color: Colors.grey),
                        ListView.builder(
                          shrinkWrap: true,
                          physics: const NeverScrollableScrollPhysics(),
                          itemCount: _leaderboard.length,
                          itemBuilder: (context, index) {
                            final item = _leaderboard[index];
                            return Padding(
                              padding: const EdgeInsets.symmetric(vertical: 8.0),
                              child: Container(
                                padding: const EdgeInsets.all(12),
                                decoration: BoxDecoration(
                                  color: Colors.grey[50],
                                  borderRadius: BorderRadius.circular(10),
                                  border: Border.all(color: Colors.grey[200]!),
                                ),
                                child: Row(
                                  children: [
                                    Text(
                                      '${index + 1}.',
                                      style: const TextStyle(
                                        fontWeight: FontWeight.bold,
                                        fontSize: 18,
                                        color: Color(0xFFB71C1C), // Blood Red
                                      ),
                                    ),
                                    const SizedBox(width: 10),
                                    Icon(
                                      item['type'] == 'company' ? Icons.business : Icons.person,
                                      color: item['type'] == 'company' ? Colors.blue[700] : Colors.green[700],
                                      size: 20,
                                    ),
                                    const SizedBox(width: 8),
                                    Expanded(
                                      child: Text(
                                        item['name'] ?? 'N/A',
                                        style: const TextStyle(fontSize: 16, color: Colors.black),
                                      ),
                                    ),
                                    StarRating(score: item['score']?.toInt() ?? 1),
                                    const SizedBox(width: 8),
                                    Text(
                                      '(${item['reviews']} reviews)',
                                      style: const TextStyle(fontSize: 12, color: Colors.black54),
                                    ),
                                  ],
                                ),
                              ),
                            );
                          },
                        ),
                      ],
                    ),
                  ),
                ),
              ],
            ),
          ),
        ),
      ),
    );
  }
}
